#!/usr/bin/ruby
# MacRuby AOT Compiler.
#
# This file is covered by the Ruby license.
#
# Copyright (C) 2009-2011, Apple Inc

require 'optparse'
require 'rbconfig'
require 'macruby/compiler'

NAME = File.basename(__FILE__)

def die(*args)
  $stderr.puts args
  exit 1
end

options = { frameworks: [], linkf: [], archs: [] }
options[:internal] = ARGV.delete('--internal')

OptionParser.new do |opts|
  opts.banner = "Usage: #{NAME} [options] file..."

  opts.on('-c', 'Compile and assemble, but do not link') {
    options[:dont_link] = true
  }

  opts.on('-o <file>', 'Place the output into <file>') {
    |output| options[:output] = output
  }

  opts.on('--static', "Create a standalone static executable") {
    options[:static] = true
  }

  opts.on('--framework <name>', "Link standalone static executable with given framework") {
    |p| options[:frameworks] << p
  }

  opts.on('--sdk <path>', "Use SDK when compiling standalone static executable") {
    |x| options[:sdk] = x
  }

  opts.on('--dylib', "Create a dynamic library") {
    options[:dylib] = true
  }

  opts.on('--compatibility_version <VERSION>', "Compatibility Version for linking") {
    |ver| options[:linkf] << "-compatibility_version #{ver}"
  }

  opts.on('--current_version <VERSION>', "Current Version for linking") {
    |ver| options[:linkf] << "-current_version #{ver}"
  }

  opts.on('--install_name <NAME>', "Install Name for linking") {
    |name| options[:linkf] << "-install_name #{name}"
  }

  opts.on('-C', 'Compile, assemble and link a loadable object file') {
    options[:bundle] = true
  }

  opts.on('-a', '--arch <ARCH>', 'Compile for specified CPU architecture') {
    |arch| options[:archs] << arch
  }

  opts.on('-v', '--version', 'Display the version') {
    puts RUBY_DESCRIPTION
    exit 1
  }

  opts.on('-V', '--verbose', 'Print every command line executed') {
    options[:verbose] = true
  }

  opts.on('-h', '--help', 'Display this information') {
    die opts
  }

  begin
    opts.parse!(ARGV)
  rescue OptionParser::InvalidOption => e
    die e, opts
  end
  die opts if ARGV.empty?

  options[:files] = ARGV
end


app = MacRuby::Compiler.new(options)
begin
  app.run
rescue Exception => e
  die e.message
end
